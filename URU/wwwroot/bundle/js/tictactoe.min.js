'use strict';

const connection = new signalR.HubConnectionBuilder().withUrl('/gameHub').configureLogging(signalR.LogLevel.None).build();

connection.start().catch(function (err) {
    return console.error(err.toString());
});

async function start() {
    try {
        await connection.start();
    } catch (err) {
        setTimeout(() => start(), 10000);
    }
}

connection.onclose(async () => {
    await start();
});

connection.on('ReceiveWinner', function (player, winner) {
    if (player.item1 !== '') {
        document.getElementById(player.item1 + '-score').textContent = ' (' + player.item2 + ')';
    }

    document.getElementById('results').classList.toggle('invisible');
    document.getElementById('results').textContent = winner;

    setTimeout(function () {
        document.getElementById('results').classList.toggle('invisible');
    }, 3000);

    drawBoard();
});

connection.on('ReceiveScores', function (players) {
    for (let i = 0; i < players.length; i++) {
        var playerScore = document.getElementById(players[i].item1 + '-score');

        if (playerScore) {
            playerScore.textContent = ' (' + players[i].item2 + ')';
        }
    }
});

connection.on('ReceiveBoard', function (board, playerMoves) {
    let gameBoard = document.getElementById('board').children;

    for (let i = 0; i < 3; i++) {
        let elements = gameBoard[i].getElementsByTagName('td');
        for (let j = 0; j < elements.length; j++) {
            elements[j].textContent = board[i][j];
        }
    }

    for (let i = 0; i < playerMoves.length; i++) {
        let icon = document.getElementById(playerMoves[i].item1 + '-tag');
        if (icon && icon.id.includes(playerMoves[i].item1)) {
            icon.textContent = playerMoves[i].item2 + ' - ';
        }
    }
});

connection.on('ReceiveTurn', function (player) {
    var activePlayers = document.getElementById('players').getElementsByTagName('span');

    var markedPlayer = false;
    for (let i = 0; i < activePlayers.length; i++) {
        activePlayers[i].classList.remove('player-active');

        if (!markedPlayer && activePlayers[i].textContent.includes(player)) {
            activePlayers[i].classList.add('player-active');
            markedPlayer = true;
        }
    }
});

connection.on('Activity', function (context) {
    let information = document.getElementsByClassName('information');
    let activePlayers = document.getElementById('players');
    let spectators = document.getElementById('spectators');

    activePlayers.innerHTML = '';
    spectators.innerHTML = '';

    if (document.getElementById('game-id').value === '') {
        for (let i = 0; i < information.length; i++) {
            information[i].classList.add('invisible');
        }
        return;
    }

    for (let i = 0; i < information.length; i++) {
        information[i].classList.remove('invisible');
    }

    var playerIndex = 0;
    for (var key in context) {
        let spanTag = document.createElement('span');
        spanTag.id = context[key] + '-tag';
        spanTag.textContent = '? - ';

        let spanId = document.createElement('span');
        spanId.id = context[key] + '-id';
        spanId.textContent = context[key];

        let spanScore = document.createElement('span');
        spanScore.id = context[key] + '-score';
        spanScore.textContent = ' (0)';

        let spanNewLine = document.createElement('span');
        spanNewLine.classList.add('newline');

        if (playerIndex++ < 2) {
            activePlayers.appendChild(spanTag);
            activePlayers.appendChild(spanId);
            activePlayers.appendChild(spanScore);
            activePlayers.appendChild(spanNewLine);
        } else {
            spectators.appendChild(spanTag);
            spectators.appendChild(spanId);
            spectators.appendChild(spanScore);
            spectators.appendChild(spanNewLine);
        }
    }
});

document.getElementById('game-id').addEventListener('input', function () {
    joinRoom();
});
'use strict';

document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('player-id').value = '';
    document.getElementById('game-id').value = '';

    let buttonReady = document.getElementById('ready-button');
    buttonReady.addEventListener('click', generatePlayzone);

    let inputPlayerId = document.getElementById('player-id');
    inputPlayerId.addEventListener('keyup', function (e) {
        if (inputPlayerId.value.length < 2) {
            buttonReady.classList.remove('btn-ready');
            return;
        }

        buttonReady.classList.add('btn-ready');

        if (e.key === 'Enter') {
            generatePlayzone();
        }
    });
});

function generatePlayzone() {
    let playerName = document.getElementById('player-id').value;

    if (playerName.length < 2) {
        document.getElementById('name-error').classList.remove('invisible');
        return;
    }

    connection.invoke('AddPlayer', playerName);

    document.getElementById('player').textContent = playerName;
    document.getElementById('name-container').outerHTML = '';
    document.getElementById('play-container').classList.remove('invisible');
    document.getElementById('game-id').focus();

    drawBoard();
}

let previousRoom = '';

function joinRoom() {
    let room = document.getElementById('game-id').value;

    connection.invoke('InitializeGroup', previousRoom, room);
    connection.invoke('InitializeBoard', room);
    connection.invoke('UpdateScores', room);
    connection.invoke('UpdateScores', previousRoom);

    document.getElementById('room').textContent = room;
    previousRoom = room;
}

function drawBoard() {
    let board = document.getElementById('board');

    while (board.hasChildNodes()) {
        board.removeChild(board.firstChild);
    }

    let squares = 1;
    for (let x = 0; x < 3; x++) {
        var row = document.createElement('tr');
        row.classList.add('row');

        for (let y = 0; y < 3; y++) {
            var column = document.createElement('td');
            column.innerHTML = squares;
            column.id = squares++;

            column.addEventListener('click', function () {
                let room = document.getElementById('room').textContent;
                connection.invoke('UpdateBoard', room, x, y);
                connection.invoke('CheckWinner', room);
            });

            row.appendChild(column);
        }

        board.appendChild(row);
    }
}